# ------------------------------------------------------------------------------
# Bag information:
# ------------------------------------------------------------------------------
  # For IG:
gps_type: "NavSatFix" # For IG use "NavSatFix", for Moose use "INSPVAX"
gps_topic: ""
# gps_topic: "/piksi/navsatfix_best_fix"
# gps_topic: "/gps/filtered"
gps_imu_topic: ""
#gps_imu_topic: "/imu/rpy/filtered" # imu topic used to fill gps_container rotation
                                   # NOTE: rpy depends on mounting position. Check in void ICP1ScanMatcher::loadIMUMessage()
                                   # For IG: +x = +pitch, +y = -roll, +z = -yaw
odom_topic: "/odometry/filtered_odom"
init_method: 2                    # Init. Graph Poses with (1) GPS/IMU, (2) odometry
lidar_topic_loc: "/hvlp/velodyne_points"
lidar_topic_map: "/vvlp/velodyne_points"
bag_file_path: "/home/nick/bag_files/ig_scans/2018_12_ATS/processed_2019_01_18/2019-01-18-16-29-27-B-short5.bag"
# TODO: Implement this:
use_prev_poses: false             # if you want to use pre-calculated pose results and just rebuild the maps, set to true
prev_poses_path: "/home/nick/results/ig_maps/ig_graph_slam/tmp_maps/mapX/poses.txt"

T_LIDAR_GPS: # this is used to transform the lidar to the map frame for pose initialization
  rows: 4
  cols: 4
  data: [ 1.00000,   0.00000,   0.00000,  -0.16450,
          0.00000,   1.00000,   0.00000,   0.16100,
          0.00000,   0.00000,   1.00000,   0.22860,
          0.00000,   0.00000,   0.00000,   1.00000]
T_LMAP_LLOC: # tranformation from localization lidar to map lidar
  rows: 4
  cols: 4
  data: [  0.00000,    0.00000,   1.00000,   -0.12000,
           0.00000,   -1.00000,   0.00000,    0.00000,
           1.00000,    0.00000,   0.00000,    0.13500,
           0.00000,    0.00000,   0.00000,    1.00000 ]

  # For Moose:
# gps_type: "INSPVAX" # For IG use "NavSatFix", for Moose use "INSPVAX"
# gps_topic: "/novatel_data/inspvax"
# gps_imu_topic: "" # Leave blank, this is already contained in INSPVAX
# odom_topic: ""  # leave blank
# init_method: 1                    # Init. Graph Poses with (1) GPS/IMU, (2) odometry
# lidar_topic_loc: "/velodyne_points"
# lidar_topic_map: "/velodyne_points"
# bag_file_path: "/home/nick/bag_files/moose/Colby-Drive-2018-03-07-15-All_processed.bag"
# T_LIDAR_GPS:
#   rows: 4
#   cols: 4
#   data: [0.01509071528209, 0.999682453252146, 0.020180757469545, -1.13100671456291,
#          -0.999885273300259, 0.0150612284003753, 0.00161233877866006, 0.0537695687956896,
#          0.00130787978818302, -0.0202027735432893, 0.999795047693085, -1.21218592853368,
#          -0, 0, -0, 1]
# T_LMAP_LLOC: # tranformation from localization lidar to map lidar
#   rows: 4
#   cols: 4
#   data: [  1.00000,    0.00000,   0.00000,    0.0,
#            0.00000,    1.00000,   0.00000,    0.0,
#            0.00000,    0.00000,   1.00000,    0.0,
#            0.00000,    0.00000,   0.00000,    1.0 ]
# ------------------------------------------------------------------------------
# Filters:
# ------------------------------------------------------------------------------
# PassThrough Filter: set min and max in each direction for input cloud
use_pass_through_filter: true
x_upper_threshold: 60
x_lower_threshold: -60
y_upper_threshold: 60
y_lower_threshold: -60
z_upper_threshold: 15
z_lower_threshold: -1

# Voxel Grid Filter (input clouds):
downsample_input: true
input_downsample_size: 0.2

# Radius outlier removal filter (input clouds)
use_rad_filter: true
set_min_neighbours: 2
set_search_radius: 0.5

# Ground segmentation - THIS IS NOT IMPLEMENTED
ground_segment: false               # Whether to remove the ground points. This
                                    # will greatly improve match speed, but may
                                    # reduce elevation accuracy of final map

# Voxel filtering
downsample_output_method: 3       # [1] downsample each scan before aggregating + each intermediate map
                                  # [2] downsample only intermediate maps (default)
                                  # [3] do not down sample output map
downsample_cell_size: 0.05        # Voxel cell length for final downsampling of aggregate map
int_map_size: 15                  # Scans are combined into intermediate maps
                                  # each intermediate map is filtered once. Default: 15

# PassThrough Filter for the Map scans: set min and max in each direction for input cloud
use_pass_through_filter_map: true
x_upper_threshold_map: 15
x_lower_threshold_map: -15
y_upper_threshold_map: 20
y_lower_threshold_map: -20
z_upper_threshold_map: 5
z_lower_threshold_map: -5

# ------------------------------------------------------------------------------
# Mapping Parameters:
# ------------------------------------------------------------------------------

# Graph Parameters:
k_nearest_neighbours: 2            # maximum number of nearest neighbours for graph links
trajectory_sampling_distance: 4   # Minimum distance in m at which we should take new scans for localization
map_sampling_distance: 1         # Minimum distance in m at which we should take new scans for mapping
distance_match_min: 0               # specify minimum and maximum distance between scans to
distance_match_limit: 10.0          # use for scan registration
loop_max_distance: 4                # how close do two poses need to be to apply a loop closure constraint
                                    # set to 0 to stop loop closure
loop_min_travel_distance: 10        # how far does the robot need to travel before looking for loop closure
iterations: 2                       # How many times to update initial estimates and redo matches
use_gps: false                      # Whether to use GPS priors in graph optimization. Even if set false, GPS will be
                                    # TODO: KEEP FALSE UNTIL WE HAVE RPY IN GPS MESSAGE
                                    # used to supply initial estimates for the matcher.
optimize_gps_lidar: false           # NOT IMPLEMENTED-whether to optimize extrinsic GPS - lidar transform.
fixed_scan_transform_cov: false         # Use this if you want to set a given
scan_transform_cov:                     # cov to the scan registrations.
  rows: 6                               # Otherwise, it will use the function:
  cols: 6                               # wave::ICPMatcher::estimateInfo()
  data: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# Scan Matcher Parameters:
visualize: false                     # Whether to visualize matches as they happen
                                    # White: initial post estimate of current scan  (j)
                                    # Red: adjacent scan (i) transfered into estimate frame J
                                    # Blue: scan i after registration against j (shoudl match white)
step_matches: false
combine_scans: false     # combine scans  from both lidar for scan registrations. Default false
matcher_type: "icp"    # icp: point to point icp in PCL, loam: loam registration, gicp: wave::gicp
matcher_config_path: "/home/nick/ig_catkin_ws/src/ig_graph_slam/config/icp.yaml"
# matcher_config_path: "/home/nick/ig_catkin_ws/src/ig_graph_slam/config/gicp.yaml"
output_path: "/home/nick/results/ig_maps/ig_graph_slam/tmp_maps/"
